import canParser
import sys

receive_prefix = 'deorbit_'

packets = canParser.loadByName()

f = open(sys.argv[1])

out = open(sys.argv[2] + '/skylab.c','w')
h = open(sys.argv[2] + '/skylab.h','w')


h.write('/* Autogenerated by can2Crx.py, do not edit */\n')
h.write('#ifndef SKYLAB_H\n')
h.write('#define SKYLAB_H\n')

h.write('#include "orbit.h"\n\n')

h.write('void skylab_packet_handler(CanRxMsg * p);\n')
h.write('void skylab_init(void);\n')

out.write('#include "stm32f4xx_can.h"\n')
out.write('#include "d1k_can.h"\n')
out.write('#include "skylab.h"\n')
out.write('void skylab_packet_handler(CanRxMsg * p) {\n')
out.write('\tswitch(p->StdId) {\n')
for line in f:
    p = packets[line.strip()]
    if 'repeat' not in p: 
        repeat = 1
    else:
        repeat = p['repeat']
    if 'offset' not in p:
        offset = 1
    else:
        offset = p['offset']
    for i in range(repeat):
        out.write('\tcase '+str(p['id']+i*offset)+':\n')
    out.write('\t\t'+receive_prefix+p['name']+'(')
    h.write('void '+receive_prefix+p['name']+'(')
    arguments = []
    dlc = 0
    bytenum = 0
    h.write(canParser.getPrototypeArgs(p))
    if 'repeat' in p:
        arguments.append('(p->StdId - '+str(p['id'])+')/'+str(p['offset']))
    for field in p['data']:
        if field['type'] == 'bitfield':
            bits = []
            bitcount = 0
            for subfield in field['bits']:
                if 'bitnum' not in subfield: subfield['bitnum'] = 1
                mask = hex(2**subfield['bitnum']-1)
                arguments.append('(p->Data[' + str(bytenum) + ']>>'+str(bitcount)+')&'+mask)
                bitcount += subfield['bitnum']
            bytenum += 1
        elif field['type'] == 'float':
            bytes = []
            for offset in range(0,canParser.c_lengths[field['type']]):
                bytes.append('.b['+str(offset)+'] = p->Data['+str(offset+bytenum)+']')
            arguments.append('((can_float_union_t){'+','.join(bytes)+' }).f')
            bytenum += canParser.c_lengths[field['type']];
        else:
            bytes = []
            for offset in range(0,canParser.c_lengths[field['type']]):
                bytes.append('(p->Data['+str(offset+bytenum)+']<<'+str((offset)*8)+')')
            arguments.append('('+field['type']+')('+'|'.join(bytes)+')')
            bytenum += canParser.c_lengths[field['type']];


    out.write(', '.join(arguments))
    out.write(');\n')
    h.write(');\n')
    out.write('\tbreak;\n')
out.write('\t}\n')
out.write('}\n')

out.write('\n')

out.write('void skylab_init(void) {\n')
out.write('\tCANRXEntry_t e = {.mask = 0, .idAfterMask = 0, .callback = skylab_packet_handler};\n')
out.write('\td1k_CAN_RegisterHandler(CAN1,&e);\n')
out.write('}\n')

h.write('#endif')