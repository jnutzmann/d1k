#!/usr/bin/python

import yaml
import pprint
import sys
import StringIO
import simplemediawiki
import os
import canParser

out = StringIO.StringIO()

packets = canParser.loadAsList()['packets']

out.write('Autogenerated by can2wiki.py\n\n')

out.write('<html><div style="width: 100%; overflow-x: scroll; overflow-y:hidden; border: 1px solid gray;">\n')
for p in sorted(packets, key=lambda pkt:pkt['id']):
    width = p['repeat'] if 'repeat' in p else 1
    out.write('<a href="#'+p['name']+'" title="'+hex(p['id']) + ': ' + p['name']+'" style="width: '+str(width*2)+'px; display:block; height: 50px;float: left; background-color: blue; position: relative; ')
    out.write('left: '+str(2*p['id'])+'px;')
    out.write('"></a>')
out.write('</div></html>\n')
out.write('<br>\n')

for file in os.listdir('packets/'):
    f = open('packets/' + file, 'r')
    out.write('== ' +file+' ==\n')
    yaml_file = yaml.load(f)
    for packet in yaml_file['packets']:
        out.write('=== '+packet['name']+' ===\n')
        if 'endian' not in packet:
            packet['endian'] = 'big'
        out.write("'''id: '''"+hex(packet['id'])+'<br>\n')
        out.write("'''Description: '''"+packet['description']+'<br>\n')
        out.write("'''Endianness:''' "+packet['endian']+'<br>\n')
        if 'repeat' in packet:
            out.write("This packet repeats "+str(packet['repeat'])+" times.<br>\n")
        out.write('<table class="wikitable">\n')
        fieldpos = 0
        for field in packet['data']:
            if field['type'] == 'uint8_t' or field['type'] == 'int8_t':
                out.write('<tr>')
                out.write('<td colspan=2>Byte '+str(fieldpos)+'</td>')
                out.write('<td>'+field['name'])
                if 'units' in field:
                    out.write(' ('+field['units']+')')
                out.write('</td></tr>')
                fieldpos += 1
            if field['type'] == 'uint16_t' or field['type'] == 'int16_t':
                out.write('<tr><td colspan=2>Byte '+str(fieldpos)+'</td>')
                out.write('<td rowspan=2>'+field['name'])
                if 'units' in field:
                    out.write(' ('+field['units']+')')
                out.write('</td></tr>')
                out.write('<tr><td colspan=2>Byte '+str(fieldpos+1)+'</td></tr>')
                fieldpos += 2
            if field['type'] == 'uint32_t' or field['type'] == 'int32_t' or field['type'] == 'float':
                out.write('<tr><td colspan=2>Byte '+str(fieldpos)+'</td>')
                out.write('<td rowspan=4>'+field['name'])
                if 'units' in field:
                    out.write(' ('+field['units']+')')
                out.write('</td></tr>')
                out.write('<tr><td colspan=2>Byte '+str(fieldpos+1)+'</td></tr>')
                out.write('<tr><td colspan=2>Byte '+str(fieldpos+2)+'</td></tr>')
                out.write('<tr><td colspan=2>Byte '+str(fieldpos+3)+'</td></tr>')
                fieldpos += 4
            if field['type'] == 'bitfield':
                bitfieldpos = 0
                first = True
                for bit in field['bits']:
                    bitfieldsize = 1
                    bitsstring = str(bitfieldpos)
                    if 'bitnum' in bit:
                        bitfieldsize = bit['bitnum']
                    if bitfieldsize > 1:
                        bitsstring += "-"+str(bitfieldsize+bitfieldpos-1)
                    if first:
                        first = False
                        out.write('<tr><td rowspan='+str(len(field['bits']))+'>Byte '+str(fieldpos)+'</td>')
                        out.write('<td>Bit '+bitsstring+'</td>')
                    else:
                        out.write('<tr><td>Bit '+bitsstring+'</td>')
                    out.write('<td>'+bit['name']+'</td>')
                    if 'values' in bit:
                        out.write("<td>")
                        for possible_value in bit['values']:
                            out.write(hex(possible_value)+': '+ str(bit['values'][possible_value])+'<br>')
                        out.write("</td>")
                    out.write('</tr>')
                    bitfieldpos += bitfieldsize
                fieldpos += 1
        out.write('</table>\n')
    
wiki = simplemediawiki.MediaWiki('http://umnsvp.dyndns.org/wiki/uberwiki_files/api.php')
wiki.login('Laputa', 'c@r')
pageinfo =  wiki.call({'action':'query','prop':'info','titles':'D1:CAN_Packets','intoken':'edit'})
# print pageinfo
# print out.getvalue()
wiki.call({'action':'edit','title':'D1:CAN_Packets','text':out.getvalue(),'token':pageinfo['query']['pages']['9660']['edittoken']})
